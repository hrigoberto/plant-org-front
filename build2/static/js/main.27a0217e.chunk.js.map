{"version":3,"sources":["api/index.js","actions/index.js","constants.js","components/PlantForm.js","components/PlantCard.js","components/PlantList.js","components/App.js","reducers/index.js","reducers/plantsReducer.js","index.js"],"names":["require","config","axios","create","baseURL","process","fetchPlants","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","response","wrap","_context2","prev","next","API","get","sent","type","payload","data","stop","this","_x2","apply","arguments","postOrPutPlant","plant","_ref3","_callee3","_context3","_id","put","concat","t0","post","_x3","deletePlant","_ref4","_callee4","_context4","delete","_x4","PlantForm","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","state","success","createPlantandRefresh","setState","commonName","species","color","imageUrl","height","plantingDepth","plantSpacing","number","sunReq","daysToBloom","seedingDate","Date","notes","setTimeout","handleInputChange","defineProperty","target","name","value","handleDateChange","react_default","createElement","className","onChange","placeholder","react_datepicker_es","selected","rows","onClick","React","Component","connect","_ref","_callee","_context","_x","PlantCard","deleteThething","switchEdit","editing","components_PlantForm","src","alt","bloomTime","PlantList","plants","map","components_PlantCard","key","getPlants","App","style","marginTop","background","BrowserRouter","Route","path","exact","component","combineReducers","length","undefined","action","toDateString","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","components_App","document","querySelector"],"mappings":"gQAEAA,EAAQ,KAAUC,SAClB,IAGeC,MAAMC,OAAO,CAC1BC,QAJcC,iFCMHC,EAAc,iCAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAM,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACRC,EAAIC,MADI,OACzBN,EADyBE,EAAAK,KAG/BR,EAAS,CAAES,KCZe,eDYKC,QAAST,EAASU,OAHlB,wBAAAR,EAAAS,SAAAb,EAAAc,SAAN,gBAAAC,GAAA,OAAArB,EAAAsB,MAAAF,KAAAG,YAAA,IAMdC,EAAiB,SAACC,GAAD,sBAAAC,EAAAzB,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAW,SAAAsB,EAAMpB,GAAN,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,WACtBa,EAAMI,IADgB,CAAAD,EAAAhB,KAAA,eAAAgB,EAAAhB,KAAA,EACJC,EAAIiB,IAAJ,IAAAC,OAAYN,EAAMI,KAAOJ,GADrB,OAAAG,EAAAI,GAAAJ,EAAAb,KAAAa,EAAAhB,KAAA,sBAAAgB,EAAAhB,KAAA,EACoCC,EAAIoB,KAAK,IAAKR,GADlD,OAAAG,EAAAI,GAAAJ,EAAAb,KAAA,OACjCP,EADiCoB,EAAAI,GAGvCzB,EAAS,CAAES,KCjBa,aDiBKC,QAAST,EAASU,OAHR,yBAAAU,EAAAT,SAAAQ,EAAAP,SAAX,gBAAAc,GAAA,OAAAR,EAAAJ,MAAAF,KAAAG,YAAA,IAMjBY,EAAc,SAACV,GAAD,sBAAAW,EAAAnC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAW,SAAAgC,EAAM9B,GAAN,OAAAJ,EAAAC,EAAAK,KAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cAAA0B,EAAA1B,KAAA,EAC9BC,EAAI0B,OAAOd,EAAMI,KADa,OAEpCtB,EAASR,KAF2B,wBAAAuC,EAAAnB,SAAAkB,EAAAjB,SAAX,gBAAAoB,GAAA,OAAAJ,EAAAd,MAAAF,KAAAG,YAAA,oBEbrBkB,sBACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAA1C,OAAA2C,EAAA,EAAA3C,CAAAmB,KAAAqB,IAChBE,EAAA1C,OAAA4C,EAAA,EAAA5C,CAAAmB,KAAAnB,OAAA6C,EAAA,EAAA7C,CAAAwC,GAAAM,KAAA3B,KAAMsB,KA6BRM,aAAe,SAAAC,GACbA,EAAEC,iBACF,IAAMzB,EAAQkB,EAAKQ,aACZ1B,EAAM2B,QACbT,EAAKD,MAAMW,sBAAsB5B,GACjCkB,EAAKW,SAAS,CACZC,WAAY,GACZC,QAAS,GACTC,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRC,cAAe,GACfC,aAAc,GACdC,OAAQ,GACRC,OAAQ,GACRC,YAAa,GACbC,YAAa,IAAIC,KACjBC,MAAO,GACPf,QAAS,YAEXgB,WAAW,kBAAMzB,EAAKW,SAAS,CAAEF,QAAS,MAAO,MAlDjCT,EAoDlB0B,kBAAoB,SAAApB,GAClBN,EAAKW,SAALrD,OAAAqE,EAAA,EAAArE,CAAA,GAAiBgD,EAAEsB,OAAOC,KAAOvB,EAAEsB,OAAOE,SArD1B9B,EAuDlB+B,iBAAmB,SAAAzB,GACjBN,EAAKW,SAAS,CAAEW,YAAahB,KApD3BN,EAAKQ,MAAQ,CACXI,WAAY,GACZC,QAAS,GACTC,MAAO,GACPC,SAAU,GACVC,OAAQ,GACRC,cAAe,GACfC,aAAc,GACdC,OAAQ,GACRC,OAAQ,GACRC,YAAa,GACbC,YAAa,IAAIC,KACjBC,MAAO,IAhBKxB,mFAoBhB,GAAIvB,KAAKsB,MAAMjB,MAAO,CACpB,GAAIL,KAAKsB,MAAMjB,MAAMwC,uBAAwBC,KAC3C,OAAO9C,KAAKkC,SAASlC,KAAKsB,MAAMjB,OAEhC,IAAMA,EAAQL,KAAKsB,MAAMjB,MAEzB,OADAA,EAAMwC,YAAc,IAAIC,KAAKzC,EAAMwC,aAC5B7C,KAAKkC,SAAS7B,qCAiCzB,OACEkD,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,wBACbF,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,WACbF,EAAAvE,EAAAwE,cAAA,QAAMC,UAAS,WAAA9C,OAAaX,KAAK+B,MAAMC,UACrCuB,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,UACbF,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBACbF,EAAAvE,EAAAwE,cAAA,SAAOE,SAAU1D,KAAKiD,kBAAmBrD,KAAK,OAAOwD,KAAK,aAAaC,MAAOrD,KAAK+B,MAAMI,WAAYwB,YAAY,iBAEnHJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBACbF,EAAAvE,EAAAwE,cAAA,SAAOE,SAAU1D,KAAKiD,kBAAmBrD,KAAK,OAAOwD,KAAK,UAAUC,MAAOrD,KAAK+B,MAAMK,QAASuB,YAAY,aAE7GJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBACbF,EAAAvE,EAAAwE,cAAA,SAAOE,SAAU1D,KAAKiD,kBAAmBrD,KAAK,OAAOwD,KAAK,QAAQC,MAAOrD,KAAK+B,MAAMM,MAAOsB,YAAY,WAEzGJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBACbF,EAAAvE,EAAAwE,cAAA,SAAOE,SAAU1D,KAAKiD,kBAAmBrD,KAAK,OAAOwD,KAAK,WAAWC,MAAOrD,KAAK+B,MAAMO,SAAUqB,YAAY,gBAGjHJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,UACbF,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,kBACbF,EAAAvE,EAAAwE,cAAA,SAAOE,SAAU1D,KAAKiD,kBAAmBrD,KAAK,OAAOwD,KAAK,SAASC,MAAOrD,KAAK+B,MAAMQ,OAAQoB,YAAY,YAE3GJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,kBACbF,EAAAvE,EAAAwE,cAAA,SAAOE,SAAU1D,KAAKiD,kBAAmBrD,KAAK,OAAOwD,KAAK,gBAAgBC,MAAOrD,KAAK+B,MAAMS,cAAemB,YAAY,oBAEzHJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,kBACbF,EAAAvE,EAAAwE,cAAA,SAAOE,SAAU1D,KAAKiD,kBAAmBrD,KAAK,OAAOwD,KAAK,eAAeC,MAAOrD,KAAK+B,MAAMU,aAAckB,YAAY,mBAEvHJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,kBACbF,EAAAvE,EAAAwE,cAAA,SAAOE,SAAU1D,KAAKiD,kBAAmBrD,KAAK,OAAOwD,KAAK,SAASC,MAAOrD,KAAK+B,MAAMW,OAAQiB,YAAY,iBAE3GJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,oBACbF,EAAAvE,EAAAwE,cAAA,SAAOE,SAAU1D,KAAKiD,kBAAmBrD,KAAK,OAAOwD,KAAK,SAASC,MAAOrD,KAAK+B,MAAMY,OAAQgB,YAAY,qBAE3GJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,kBACbF,EAAAvE,EAAAwE,cAAA,SAAOE,SAAU1D,KAAKiD,kBAAmBrD,KAAK,OAAOwD,KAAK,cAAcC,MAAOrD,KAAK+B,MAAMa,YAAae,YAAY,mBAErHJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,oBACbF,EAAAvE,EAAAwE,cAACI,EAAA,EAAD,CACEC,SAAU7D,KAAK+B,MAAMc,YACrBa,SAAU1D,KAAKsD,qBAIrBC,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,sBACbF,EAAAvE,EAAAwE,cAAA,YAAUM,KAAK,IAAIJ,SAAU1D,KAAKiD,kBAAmBG,KAAK,QAAQC,MAAOrD,KAAK+B,MAAMgB,MAAOY,YAAY,WAEzGJ,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,sBACbF,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,UAAf,kBACAF,EAAAvE,EAAAwE,cAAA,0CAEFD,EAAAvE,EAAAwE,cAAA,UAAQO,QAAS/D,KAAK4B,aAAc6B,UAAU,wBAAwB7D,KAAK,UAA3E,oBA/GYoE,IAAMC,YAuHfC,cAAQ,KAAM,CAAEjC,sBF3HM,SAAC5B,GAAD,sBAAA8D,EAAAtF,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAW,SAAAmF,EAAMjF,GAAN,OAAAJ,EAAAC,EAAAK,KAAA,SAAAgF,GAAA,cAAAA,EAAA9E,KAAA8E,EAAA7E,MAAA,cAAA6E,EAAA7E,KAAA,EACxCL,EAASiB,EAAeC,IADgB,cAAAgE,EAAA7E,KAAA,EAExCL,EAASR,KAF+B,wBAAA0F,EAAAtE,SAAAqE,EAAApE,SAAX,gBAAAsE,GAAA,OAAAH,EAAAjE,MAAAF,KAAAG,YAAA,KE2HtB+D,CAAyC7C,GCzHlDkD,cACJ,SAAAA,EAAYjD,GAAO,IAAAC,EAAA,OAAA1C,OAAA2C,EAAA,EAAA3C,CAAAmB,KAAAuE,IACjBhD,EAAA1C,OAAA4C,EAAA,EAAA5C,CAAAmB,KAAAnB,OAAA6C,EAAA,EAAA7C,CAAA0F,GAAA5C,KAAA3B,KAAMsB,KAMRkD,eAAiB,WACfjD,EAAKD,MAAMP,YAAYQ,EAAKD,MAAMjB,QARjBkB,EAUnBkD,WAAa,WACXlD,EAAKW,SAAS,CAAEwC,SAAUnD,EAAKQ,MAAM2C,WARrCnD,EAAKQ,MAAQ,CACX2C,SAAS,GAJMnD,wEAaV,IACClB,EAAUL,KAAKsB,MAAfjB,MACR,OAAOL,KAAK+B,MAAM2C,QAClBnB,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,wBACbF,EAAAvE,EAAAwE,cAACmB,EAAD,CAAWtE,MAAOA,IAClBkD,EAAAvE,EAAAwE,cAAA,UAAQC,UAAU,+BAA+BM,QAAS/D,KAAKyE,YAA/D,UAGAlB,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,8BACbF,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,WACbF,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,gCACbF,EAAAvE,EAAAwE,cAAA,OAAKoB,IAAKvE,EAAMiC,SAAUuC,IAAKxE,EAAM8B,cAEvCoB,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,UAAUpD,EAAM8B,YAC/BoB,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,QACbF,EAAAvE,EAAAwE,cAAA,YAAOnD,EAAM+B,SACbmB,EAAAvE,EAAAwE,cAAA,WACAD,EAAAvE,EAAAwE,cAAA,gCAAwBnD,EAAMsC,SAEhCY,EAAAvE,EAAAwE,cAAA,WACAD,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,gBAAeF,EAAAvE,EAAAwE,cAAA,oBAAgBnD,EAAM0C,OACpDQ,EAAAvE,EAAAwE,cAAA,UAAQC,UAAU,6CAA6CM,QAAS/D,KAAKwE,gBAA7E,UACAjB,EAAAvE,EAAAwE,cAAA,UAAQC,UAAU,6CAA6CM,QAAS/D,KAAKyE,YAA7E,QACAlB,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,eACbF,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,WACbF,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBAAkBF,EAAAvE,EAAAwE,cAAA,qBAAjC,IAAmDnD,EAAMkC,OAAzD,WACAgB,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBAAkBF,EAAAvE,EAAAwE,cAAA,6BAAjC,IAA2DnD,EAAMmC,cAAjE,WACAe,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBAAkBF,EAAAvE,EAAAwE,cAAA,4BAAjC,IAA0DnD,EAAMoC,aAAhE,WACAc,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBAAkBF,EAAAvE,EAAAwE,cAAA,oBAAjC,IAAkDnD,EAAMgC,OACxDkB,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBAAkBF,EAAAvE,EAAAwE,cAAA,qBAAjC,IAAmDnD,EAAMqC,QACzDa,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBAAkBF,EAAAvE,EAAAwE,cAAA,4BAAjC,IAA0DnD,EAAMuC,aAChEW,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBAAkBF,EAAAvE,EAAAwE,cAAA,yBAAjC,IAAuDnD,EAAMyE,WAC7DvB,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,mBAAkBF,EAAAvE,EAAAwE,cAAA,2BAAjC,IAAyDnD,EAAMwC,wBA9CrDmB,IAAMC,WA6DfC,cANS,SAACnC,GACvB,MAAO,CACLhB,YAAaA,IAIuB,CAAEA,eAA3BmD,CAA0CK,GC7DnDQ,8LAEF/E,KAAKsB,MAAM3C,kDAGX,OAAOqB,KAAKsB,MAAM0D,OAAOC,IAAI,SAAA5E,GAAK,OAAIkD,EAAAvE,EAAAwE,cAAC0B,EAAD,CAAW7E,MAAOA,EAAO8E,IAAK9E,EAAMI,yCAG1E,OACE8C,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,WACZzD,KAAKoF,oBAVUpB,IAAMC,WAoBfC,cAJS,SAAAnC,GACtB,MAAO,CAAEiD,OAAQjD,EAAMiD,SAGe,CAAErG,eAA3BuF,CAA0Ca,GCR1CM,EAbH,WACV,OACE9B,EAAAvE,EAAAwE,cAAA,OAAKC,UAAU,eAAe6B,MAAO,CAACC,UAAW,OAAQC,WAAY,YACnEjC,EAAAvE,EAAAwE,cAACiC,EAAA,EAAD,KACElC,EAAAvE,EAAAwE,cAAA,WACED,EAAAvE,EAAAwE,cAACkC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWxE,IACjCkC,EAAAvE,EAAAwE,cAACkC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWd,QCR5Be,cAAgB,CAC7Bd,OCDa,WAAwB,IAAvBjD,EAAuB5B,UAAA4F,OAAA,QAAAC,IAAA7F,UAAA,GAAAA,UAAA,GAAf,GAAI8F,EAAW9F,UAAA4F,OAAA,EAAA5F,UAAA,QAAA6F,EACrC,OAAOC,EAAOrG,MACZ,INLwB,eMMxB,OAAOqG,EAAOpG,QAAQoF,IAAI,SAAA5E,GAExB,OADAA,EAAMwC,YAAc,IAAIC,KAAKzC,EAAMwC,aAAaqD,eACzC7F,IAET,INTsB,aMUtB,QACE,OAAO0B,MCHPoE,EAAQC,YAAYC,EAAUC,YAAgBC,MAEpDC,IAASC,OACPlD,EAAAvE,EAAAwE,cAACkD,EAAA,EAAD,CAAUP,MAAOA,GACf5C,EAAAvE,EAAAwE,cAACmD,EAAD,OAEFC,SAASC,cAAc","file":"static/js/main.27a0217e.chunk.js","sourcesContent":["import axios from 'axios';\n\nrequire('dotenv').config();\nconst prodURL = process.env.REACT_APP_PROD_URL\nconst localURL = 'http://localhost:4000/api/plants'\n\nexport default axios.create({\n  baseURL: prodURL\n});\n","import API from '../api';\nimport { FETCH_PLANTS } from '../constants';\nimport { POST_PLANT } from '../constants';\n\nexport const createPlantandRefresh = (plant) => async dispatch => {\n  await dispatch(postOrPutPlant(plant));\n  await dispatch(fetchPlants());\n}\n\nexport const fetchPlants = () => async dispatch => {\n  const response = await API.get();\n\n  dispatch({ type: FETCH_PLANTS, payload: response.data})\n}\n\nexport const postOrPutPlant = (plant) => async dispatch => {\n  const response = plant._id ? await API.put(`/${plant._id}`, plant) : await API.post('/', plant);\n\n  dispatch({ type: POST_PLANT, payload: response.data})\n}\n\nexport const deletePlant = (plant) => async dispatch => {\n  await API.delete(plant._id);\n  dispatch(fetchPlants())\n}\n","export const FETCH_PLANTS = 'FETCH_PLANTS';\nexport const POST_PLANT = 'POST_PLANT';\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createPlantandRefresh } from '../actions';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// TODO  update button\n\nclass PlantForm extends React.Component {\n  constructor(props){\n    super(props)\n\n\n      this.state = {\n        commonName: '',\n        species: '',\n        color: '',\n        imageUrl: '',\n        height: '',\n        plantingDepth: '',\n        plantSpacing: '',\n        number: '',\n        sunReq: '',\n        daysToBloom: '',\n        seedingDate: new Date(),\n        notes: ''\n      }\n  }\n  componentDidMount() {\n    if (this.props.plant) {\n      if((this.props.plant.seedingDate) instanceof Date) {\n        return this.setState(this.props.plant);\n      } else {\n        const plant = this.props.plant\n        plant.seedingDate = new Date(plant.seedingDate);\n        return this.setState(plant);\n      }\n    }\n  }\n  handleSubmit = e => {\n    e.preventDefault();\n    const plant = this.state;\n    delete plant.success;\n    this.props.createPlantandRefresh(plant);\n    this.setState({\n      commonName: '',\n      species: '',\n      color: '',\n      imageUrl: '',\n      height: '',\n      plantingDepth: '',\n      plantSpacing: '',\n      number: '',\n      sunReq: '',\n      daysToBloom: '',\n      seedingDate: new Date(),\n      notes: '',\n      success: 'success'\n    })\n    setTimeout(() => this.setState({ success: ''} ), 2000)\n  }\n  handleInputChange = e => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n  handleDateChange = e =>  {\n    this.setState({ seedingDate: e });\n  }\n  render() {\n    return (\n      <div className=\"ui raised fluid card\">\n        <div className=\"content\">\n          <form className={`ui form ${this.state.success}`}>\n            <div className=\"fields\">\n              <div className=\"four wide field\">\n                <input onChange={this.handleInputChange} type=\"text\" name=\"commonName\" value={this.state.commonName} placeholder=\"Common Name\"/>\n              </div>\n              <div className=\"four wide field\">\n                <input onChange={this.handleInputChange} type=\"text\" name=\"species\" value={this.state.species} placeholder=\"Species\"/>\n              </div>\n              <div className=\"four wide field\">\n                <input onChange={this.handleInputChange} type=\"text\" name=\"color\" value={this.state.color} placeholder=\"Color\"/>\n              </div>\n              <div className=\"four wide field\">\n                <input onChange={this.handleInputChange} type=\"text\" name=\"imageUrl\" value={this.state.imageUrl} placeholder=\"Image URL\"/>\n              </div>\n            </div>\n            <div className=\"fields\">\n              <div className=\"two wide field\">\n                <input onChange={this.handleInputChange} type=\"text\" name=\"height\" value={this.state.height} placeholder=\"Height\"/>\n              </div>\n              <div className=\"two wide field\">\n                <input onChange={this.handleInputChange} type=\"text\" name=\"plantingDepth\" value={this.state.plantingDepth} placeholder=\"Planting Depth\"/>\n              </div>\n              <div className=\"two wide field\">\n                <input onChange={this.handleInputChange} type=\"text\" name=\"plantSpacing\" value={this.state.plantSpacing} placeholder=\"Plant Spacing\"/>\n              </div>\n              <div className=\"two wide field\">\n                <input onChange={this.handleInputChange} type=\"text\" name=\"number\" value={this.state.number} placeholder=\"# of Plants\"/>\n              </div>\n              <div className=\"three wide field\">\n                <input onChange={this.handleInputChange} type=\"text\" name=\"sunReq\" value={this.state.sunReq} placeholder=\"Sun Requirement\"/>\n              </div>\n              <div className=\"two wide field\">\n                <input onChange={this.handleInputChange} type=\"text\" name=\"daysToBloom\" value={this.state.daysToBloom} placeholder=\"Days to Bloom\"/>\n              </div>\n              <div className=\"three wide field\">\n                <DatePicker\n                  selected={this.state.seedingDate}\n                  onChange={this.handleDateChange}\n                />\n              </div>\n            </div>\n            <div className=\"sixteen wide field\">\n              <textarea rows=\"2\" onChange={this.handleInputChange} name=\"notes\" value={this.state.notes} placeholder=\"Notes\"/>\n            </div>\n            <div className=\"ui success message\">\n              <div className=\"header\">Form Completed</div>\n              <p>Your entry has been recorded</p>\n            </div>\n            <button onClick={this.handleSubmit} className=\"ui submit teal button\" type=\"submit\">Submit</button>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, { createPlantandRefresh })(PlantForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { deletePlant } from '../actions';\nimport PlantForm from './PlantForm';\n\n\nclass PlantCard extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      editing: false\n    }\n  }\n  deleteThething = () => {\n    this.props.deletePlant(this.props.plant)\n  }\n  switchEdit = () => {\n    this.setState({ editing: !this.state.editing });\n  }\n  render() {\n    const { plant } = this.props;\n    return this.state.editing ? (\n    <div className=\"ui raised fluid card\">\n      <PlantForm plant={plant} />\n      <button className=\"ui blue button right floated\" onClick={this.switchEdit}>Close</button>\n    </div>\n    ) : (\n      <div className=\"ui raised fluid plant card\">\n        <div className=\"content\">\n          <div className=\"ui medium image left floated\">\n            <img src={plant.imageUrl} alt={plant.commonName} />\n          </div>\n          <div className=\"header\">{plant.commonName}</div>\n          <div className=\"meta\">\n            <span>{plant.species}</span>\n            <br />\n            <span>Sun Requirement: {plant.sunReq}</span>\n          </div>\n          <br />\n          <div className=\"left floated\"><h4>Notes:</h4>{plant.notes}</div>\n          <button className=\"ui red button right floated right attached\" onClick={this.deleteThething}>DELETE</button>\n          <button className=\"ui teal button right floated left attached\" onClick={this.switchEdit}>EDIT</button>\n          <div className=\"description\">\n            <div className=\"ui grid\">\n              <div className=\"two wide column\"><h4>Height:</h4> {plant.height} inches</div>\n              <div className=\"two wide column\"><h4>Planting Depth:</h4> {plant.plantingDepth} inches</div>\n              <div className=\"two wide column\"><h4>Plant Spacing:</h4> {plant.plantSpacing} inches</div>\n              <div className=\"two wide column\"><h4>Color:</h4> {plant.color}</div>\n              <div className=\"two wide column\"><h4>Number:</h4> {plant.number}</div>\n              <div className=\"two wide column\"><h4>Days to bloom:</h4> {plant.daysToBloom}</div>\n              <div className=\"two wide column\"><h4>Bloom Time:</h4> {plant.bloomTime}</div>\n              <div className=\"two wide column\"><h4>Seeding Date:</h4> {plant.seedingDate}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    deletePlant: deletePlant\n  }\n}\n\nexport default connect(mapStateToProps, { deletePlant })(PlantCard);\n","import React from 'react';\nimport PlantCard from './PlantCard';\nimport { connect } from 'react-redux';\nimport { fetchPlants } from '../actions';\n\n\nclass PlantList extends React.Component {\n  componentDidMount() {\n    this.props.fetchPlants();\n  }\n  getPlants() {\n    return this.props.plants.map(plant => <PlantCard plant={plant} key={plant._id} />);\n  }\n  render() {\n    return (\n      <div className=\"ui list\">\n        {this.getPlants()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return { plants: state.plants };\n}\n\nexport default connect(mapStateToProps, { fetchPlants })(PlantList);\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport PlantList from './PlantList';\nimport PlantForm from './PlantForm';\n\nconst App = () => {\n  return (\n    <div className=\"ui container\" style={{marginTop: \"20px\", background: \"#dde1c6\"}}>\n      <BrowserRouter>\n        <div>\n          <Route path=\"/\" exact component={PlantForm} />\n          <Route path=\"/\" exact component={PlantList} />\n        </div>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport plantsReducer from './plantsReducer';\n\nexport default combineReducers({\n  plants: plantsReducer\n})\n","import { FETCH_PLANTS } from '../constants';\nimport { POST_PLANT } from '../constants';\n\nexport default (state = [], action) => {\n  switch(action.type) {\n    case FETCH_PLANTS:\n    return action.payload.map(plant => {\n      plant.seedingDate = new Date(plant.seedingDate).toDateString();\n      return plant;\n    });\n    case POST_PLANT:\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'));\n"],"sourceRoot":""}